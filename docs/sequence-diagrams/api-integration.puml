@startuml

participant "Node" as Node order 5
participant "EnactTrust\nFrontEnd" as FE order 10
participant "EnactTrust\nBackEnd" as BE order 20
database "EnactTrust\nBackend DB" as BE_DB order 30
participant "Veraison\nEvidence\nVerification" as V_EviVfy order 35
participant "Veraison\nEndorsements\nProvisioning" as V_EndProv order 40
database "Veraison\nEndorsement Store" as V_EndStore order 50

group keys provisioning and Node ID assignment

	Node -> BE: POST /node/pem, Body: {AK_pub, EK_pub}
	BE -> BE: generate nodeID
	BE -> BE_DB: store nodeID AK_pub and EK_pub
	BE -> BE: repackage {nodeID, AK_pub} as CoRIM
	BE -> V_EndProv: POST /submit, C-T: "application/corim-unsigned+cbor; profile=http://enacttrust.com/veraison/1.0.0" Body: CoRIM{AVK(nodeID, AK_pub)}
	V_EndProv -> V_EndStore: nodeID=>{AK_pub}
	V_EndProv -> BE: Status: 200
	BE -> Node: Status: 201, Body: {nodeID}
end

group golden values provisioning
	Node -> BE: POST /node/secret, Body: {nodeID}
	BE -> V_EviVfy: POST /newSession
	V_EviVfy -> V_EviVfy: /session/123=>{"nonce"="the-challenge", ...}
	V_EviVfy -> BE: Status: 201, Location: /session/123, Body: {challenge-blob, ...}
	BE -> BE: Encrypt(EK_pub, "the-challenge") -> challenge-blob
	BE -> Node: Status: 201, Body: {challenge-blob}

	Node -> Node: Decrypt(EK_priv, challenge-blob) -> "the-challenge"
	Node -> Node: TPM2_Quote("the-challenge", PCR23) -> golden
	Node -> BE: POST /node/golden, Body: {nodeID, golden}
	BE -> V_EviVfy: POST /session/123, C-T: application/vnd.enacttrust.tpm-evidence; \n Body: {TPMS_ATTEST_LENGTH || TPMS_ATTEST || TPMT_SIGNATURE }
	V_EviVfy -> V_EviVfy: Extract the-challenge from TPMS_ATTEST.extraData
	V_EviVfy -> V_EviVfy: Extract nodeID from TPMS_ATTEST.extraData
	V_EviVfy -> V_EndStore: lookupKeys(nodeID)
	V_EndStore -> V_EviVfy: AK_pub
	V_EviVfy -> V_EviVfy: Verify(AK_pub, TPMS_ATTEST, TPMT_SIGNATURE)
	V_EviVfy -> V_EviVfy: Verify("the-challenge"))
	alt verification successful
		V_EviVfy -> BE: Status: 200, Body: {"state": "complete", "results": "success"}
		BE -> BE: repackage {nodeID, golden-value from TPMS_ATTEST} as CoRIM
		BE -> V_EndProv: POST /submit, C-T: "application/corim-unsigned+cbor; profile=http://enacttrust.com/veraison/1.0.0" Body: CoRIM{nodeID, golden-value}
		V_EndProv -> V_EndStore: nodeID=>{golden-value}
		V_EndProv -> BE: Status: 200
		BE -> FE: Status: 200
	else verification failed
		V_EviVfy -> BE: Status: 200, Body: {"state": "complete", "results": "failure"}
		BE -> FE: Status: 500
	end
	BE -> BE_DB: update node state
end

group periodic evidence submission
	Node -> BE: POST /node/secret, Body: {nodeID}
	BE -> V_EviVfy: POST /newSession
	V_EviVfy -> V_EviVfy: /session/456=>{"nonce"="another-challenge", ...}
	V_EviVfy -> BE: Status: 201, Location: /session/456, Body: {"nonce"="another-challenge", ...}
	BE -> BE: Encrypt(EK_pub, "another-challenge") -> challenge-blob
	BE -> Node: Status: 201, Body: {challenge-blob}

	Node -> Node: Decrypt(EK_priv, challenge-blob) -> "another-challenge"
	Node -> Node: TPM2_Quote("another-challenge", PCR23) -> evidence
	Node -> BE: POST /node/evidence, Body: {nodeID, evidence)}
	BE -> V_EviVfy: POST /session/456, C-T: application/vnd.enacttrust.tpm-evidence; \n Body: {TPMS_ATTEST_LENGTH || TPMS_ATTEST || TPMT_SIGNATURE }
	V_EviVfy -> V_EviVfy: Extract another-challenge from TPMS_ATTEST.extraData
	V_EviVfy -> V_EviVfy: Extract nodeID from TPMS_ATTEST.extraData
	V_EviVfy -> V_EndStore: lookupKeys(nodeID)
	V_EndStore -> V_EviVfy: AK_pub
	V_EviVfy -> V_EviVfy: Verify(AK_pub, TPMS_ATTEST, TPMT_SIGNATURE)
	V_EviVfy -> V_EviVfy: Verify("another-challenge"))
	alt verification successful
		V_EviVfy -> BE: Status: 200, Body: {"state": "complete", "results": "success"}
		BE -> Node: Status: 200
	else verification failed
		V_EviVfy -> BE: Status: 200, Body: {"state": "complete", "results": "failure"}
		BE -> Node: Status: 500
	end
	BE -> BE_DB: update node state
end

@enduml
